/*
 * Animation Control API
 * API for managing animations, shaders, and client configurations.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient.js";
import AnimationDefinition from '../model/AnimationDefinition.js';

/**
* Animations service.
* @module api/AnimationsApi
* @version 1.0.0
*/
export default class AnimationsApi {

    /**
    * Constructs a new AnimationsApi. 
    * @alias module:api/AnimationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiAnimationGetShaderIDGet operation.
     * @callback moduleapi/AnimationsApi~apiAnimationGetShaderIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnimationDefinition{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a specific animation
     * @param {String} shaderID ID of the animation to retrieve
     * @param {module:api/AnimationsApi~apiAnimationGetShaderIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAnimationGetShaderIDGet(shaderID, callback) {
      
      let postBody = null;
      // verify the required parameter 'shaderID' is set
      if (shaderID === undefined || shaderID === null) {
        throw new Error("Missing the required parameter 'shaderID' when calling apiAnimationGetShaderIDGet");
      }

      let pathParams = {
        'shaderID': shaderID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnimationDefinition;

      return this.apiClient.callApi(
        '/api/animation/get/{shaderID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAnimationImageShaderIDGet operation.
     * @callback moduleapi/AnimationsApi~apiAnimationImageShaderIDGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the image associated with an animation
     * @param {String} shaderID ID of the animation
     * @param {module:api/AnimationsApi~apiAnimationImageShaderIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAnimationImageShaderIDGet(shaderID, callback) {
      
      let postBody = null;
      // verify the required parameter 'shaderID' is set
      if (shaderID === undefined || shaderID === null) {
        throw new Error("Missing the required parameter 'shaderID' when calling apiAnimationImageShaderIDGet");
      }

      let pathParams = {
        'shaderID': shaderID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/animation/image/{shaderID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAnimationListGet operation.
     * @callback moduleapi/AnimationsApi~apiAnimationListGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{'String': AnimationDefinition}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available animations
     * @param {module:api/AnimationsApi~apiAnimationListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAnimationListGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': AnimationDefinition};

      return this.apiClient.callApi(
        '/api/animation/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}