/*
 * Animation Control API
 * API for managing animations, shaders, and client configurations.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient.js";
import ClientConfig from '../model/ClientConfig.js';
import InlineResponse200 from '../model/InlineResponse200.js';

/**
* Clients service.
* @module api/ClientsApi
* @version 1.0.0
*/
export default class ClientsApi {

    /**
    * Constructs a new ClientsApi. 
    * @alias module:api/ClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiClientGetClientIDGet operation.
     * @callback moduleapi/ClientsApi~apiClientGetClientIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientConfig{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration of a specific client
     * @param {String} clientID ID of the client
     * @param {module:api/ClientsApi~apiClientGetClientIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientGetClientIDGet(clientID, callback) {
      
      let postBody = null;
      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling apiClientGetClientIDGet");
      }

      let pathParams = {
        'clientID': clientID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientConfig;

      return this.apiClient.callApi(
        '/api/client/get/{clientID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientListGet operation.
     * @callback moduleapi/ClientsApi~apiClientListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all connected clients
     * @param {module:api/ClientsApi~apiClientListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientListGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/client/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientSetClientIDPost operation.
     * @callback moduleapi/ClientsApi~apiClientSetClientIDPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set configuration for a specific client
     * @param {module:model/ClientConfig} body 
     * @param {String} clientID ID of the client (leave empty to broadcast to all clients)
     * @param {module:api/ClientsApi~apiClientSetClientIDPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiClientSetClientIDPost(body, clientID, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiClientSetClientIDPost");
      }
      // verify the required parameter 'clientID' is set
      if (clientID === undefined || clientID === null) {
        throw new Error("Missing the required parameter 'clientID' when calling apiClientSetClientIDPost");
      }

      let pathParams = {
        'clientID': clientID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/client/set/{clientID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientSetPost operation.
     * @callback moduleapi/ClientsApi~apiClientSetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set configuration for all clients
     * @param {module:model/ClientConfig} body 
     * @param {module:api/ClientsApi~apiClientSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiClientSetPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiClientSetPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/client/set/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}