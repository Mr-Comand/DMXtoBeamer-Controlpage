/*
 * Animation Control API
 * API for managing animations, shaders, and client configurations.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AnimationControlApi);
  }
}(this, function(expect, AnimationControlApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ClientConfig', function() {
      beforeEach(function() {
        instance = new AnimationControlApi.ClientConfig();
      });

      it('should create an instance of ClientConfig', function() {
        // TODO: update the code to test ClientConfig
        expect(instance).to.be.a(AnimationControlApi.ClientConfig);
      });

      it('should have the property layers (base name: "layers")', function() {
        // TODO: update the code to test the property layers
        expect(instance).to.have.property('layers');
        // expect(instance.layers).to.be(expectedValueLiteral);
      });

      it('should have the property dimmer (base name: "dimmer")', function() {
        // TODO: update the code to test the property dimmer
        expect(instance).to.have.property('dimmer');
        // expect(instance.dimmer).to.be(expectedValueLiteral);
      });

      it('should have the property hueShift (base name: "hueShift")', function() {
        // TODO: update the code to test the property hueShift
        expect(instance).to.have.property('hueShift');
        // expect(instance.hueShift).to.be(expectedValueLiteral);
      });

      it('should have the property rotate (base name: "rotate")', function() {
        // TODO: update the code to test the property rotate
        expect(instance).to.have.property('rotate');
        // expect(instance.rotate).to.be(expectedValueLiteral);
      });

      it('should have the property pan (base name: "pan")', function() {
        // TODO: update the code to test the property pan
        expect(instance).to.have.property('pan');
        // expect(instance.pan).to.be(expectedValueLiteral);
      });

      it('should have the property tilt (base name: "tilt")', function() {
        // TODO: update the code to test the property tilt
        expect(instance).to.have.property('tilt');
        // expect(instance.tilt).to.be(expectedValueLiteral);
      });

      it('should have the property scale (base name: "scale")', function() {
        // TODO: update the code to test the property scale
        expect(instance).to.have.property('scale');
        // expect(instance.scale).to.be(expectedValueLiteral);
      });

    });
  });

}));
