/*
 * Animation Control API
 * API for managing animations, shaders, and client configurations.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.67
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AnimationControlApi);
  }
}(this, function(expect, AnimationControlApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Layer', function() {
      beforeEach(function() {
        instance = new AnimationControlApi.Layer();
      });

      it('should create an instance of Layer', function() {
        // TODO: update the code to test Layer
        expect(instance).to.be.a(AnimationControlApi.Layer);
      });

      it('should have the property layerID (base name: "layerID")', function() {
        // TODO: update the code to test the property layerID
        expect(instance).to.have.property('layerID');
        // expect(instance.layerID).to.be(expectedValueLiteral);
      });

      it('should have the property animationID (base name: "animationID")', function() {
        // TODO: update the code to test the property animationID
        expect(instance).to.have.property('animationID');
        // expect(instance.animationID).to.be(expectedValueLiteral);
      });

      it('should have the property parameters (base name: "parameters")', function() {
        // TODO: update the code to test the property parameters
        expect(instance).to.have.property('parameters');
        // expect(instance.parameters).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property dimmer (base name: "dimmer")', function() {
        // TODO: update the code to test the property dimmer
        expect(instance).to.have.property('dimmer');
        // expect(instance.dimmer).to.be(expectedValueLiteral);
      });

      it('should have the property hueShift (base name: "hueShift")', function() {
        // TODO: update the code to test the property hueShift
        expect(instance).to.have.property('hueShift');
        // expect(instance.hueShift).to.be(expectedValueLiteral);
      });

      it('should have the property rotate (base name: "rotate")', function() {
        // TODO: update the code to test the property rotate
        expect(instance).to.have.property('rotate');
        // expect(instance.rotate).to.be(expectedValueLiteral);
      });

      it('should have the property pan (base name: "pan")', function() {
        // TODO: update the code to test the property pan
        expect(instance).to.have.property('pan');
        // expect(instance.pan).to.be(expectedValueLiteral);
      });

      it('should have the property tilt (base name: "tilt")', function() {
        // TODO: update the code to test the property tilt
        expect(instance).to.have.property('tilt');
        // expect(instance.tilt).to.be(expectedValueLiteral);
      });

      it('should have the property scale (base name: "scale")', function() {
        // TODO: update the code to test the property scale
        expect(instance).to.have.property('scale');
        // expect(instance.scale).to.be(expectedValueLiteral);
      });

      it('should have the property shader (base name: "shader")', function() {
        // TODO: update the code to test the property shader
        expect(instance).to.have.property('shader');
        // expect(instance.shader).to.be(expectedValueLiteral);
      });

      it('should have the property shaderParameters (base name: "shaderParameters")', function() {
        // TODO: update the code to test the property shaderParameters
        expect(instance).to.have.property('shaderParameters');
        // expect(instance.shaderParameters).to.be(expectedValueLiteral);
      });

      it('should have the property textureShaders (base name: "textureShaders")', function() {
        // TODO: update the code to test the property textureShaders
        expect(instance).to.have.property('textureShaders');
        // expect(instance.textureShaders).to.be(expectedValueLiteral);
      });

      it('should have the property textureShaderOrder (base name: "textureShaderOrder")', function() {
        // TODO: update the code to test the property textureShaderOrder
        expect(instance).to.have.property('textureShaderOrder');
        // expect(instance.textureShaderOrder).to.be(expectedValueLiteral);
      });

    });
  });

}));
